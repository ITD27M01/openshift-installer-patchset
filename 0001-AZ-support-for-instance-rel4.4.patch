From b97ba9fe024dab47783d1cc47c94696e42f39d94 Mon Sep 17 00:00:00 2001
From: ITD27M01 <igortiunov@gmail.com>
Date: Fri, 15 May 2020 19:12:16 +0300
Subject: [PATCH] Added support for instance availability zone for release-4.4

---
 data/data/openstack/bootstrap/main.tf         |  2 +
 data/data/openstack/bootstrap/variables.tf    |  5 ++
 data/data/openstack/main.tf                   |  3 +
 data/data/openstack/masters/main.tf           |  2 +
 data/data/openstack/masters/variables.tf      |  5 ++
 data/data/openstack/variables-openstack.tf    |  5 ++
 pkg/asset/cluster/tfvars.go                   |  1 +
 .../installconfig/openstack/openstack.go      | 27 +++++++
 .../openstack/realvalidvaluesfetcher.go       | 32 ++++++++
 pkg/asset/machines/openstack/machines.go      |  2 +-
 pkg/asset/machines/openstack/machinesets.go   |  2 +-
 pkg/tfvars/openstack/openstack.go             |  4 +-
 pkg/types/openstack/machinepool.go            |  4 +
 pkg/types/openstack/platform.go               |  3 +
 pkg/types/openstack/validation/platform.go    |  6 ++
 .../validation/validvaluesfetcher.go          |  2 +
 .../v2/extensions/availabilityzones/doc.go    | 61 +++++++++++++++
 .../extensions/availabilityzones/requests.go  | 20 +++++
 .../extensions/availabilityzones/results.go   | 76 +++++++++++++++++++
 .../v2/extensions/availabilityzones/urls.go   | 11 +++
 .../compute/v2/extensions/delegate.go         | 23 ++++++
 .../openstack/compute/v2/extensions/doc.go    |  3 +
 .../openstack/compute/v2/extensions/urls.go   |  7 ++
 23 files changed, 303 insertions(+), 3 deletions(-)
 create mode 100644 vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/doc.go
 create mode 100644 vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/requests.go
 create mode 100644 vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/results.go
 create mode 100644 vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/urls.go
 create mode 100644 vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/delegate.go
 create mode 100644 vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/doc.go
 create mode 100644 vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/urls.go

diff --git a/data/data/openstack/bootstrap/main.tf b/data/data/openstack/bootstrap/main.tf
index d984da124..db53bc145 100644
--- a/data/data/openstack/bootstrap/main.tf
+++ b/data/data/openstack/bootstrap/main.tf
@@ -42,6 +42,8 @@ resource "openstack_compute_instance_v2" "bootstrap" {
   flavor_id = data.openstack_compute_flavor_v2.bootstrap_flavor.id
   image_id  = var.root_volume_size == null ? var.base_image_id : null
 
+  availability_zone = var.availability_zone
+
   user_data = var.bootstrap_shim_ignition
 
   dynamic block_device {
diff --git a/data/data/openstack/bootstrap/variables.tf b/data/data/openstack/bootstrap/variables.tf
index 417c2c873..bc043d689 100644
--- a/data/data/openstack/bootstrap/variables.tf
+++ b/data/data/openstack/bootstrap/variables.tf
@@ -72,3 +72,8 @@ variable "root_volume_type" {
   type = string
   description = "The type of volume for the root block device."
 }
+
+variable "availability_zone" {
+  type        = string
+  description = "Name of availability zone to deploy cluster to."
+}
\ No newline at end of file
diff --git a/data/data/openstack/main.tf b/data/data/openstack/main.tf
index c768d7d99..7754ef2eb 100644
--- a/data/data/openstack/main.tf
+++ b/data/data/openstack/main.tf
@@ -33,6 +33,7 @@ module "bootstrap" {
   api_int_ip              = var.openstack_api_int_ip
   node_dns_ip             = var.openstack_node_dns_ip
   external_network        = var.openstack_external_network
+  availability_zone       = var.openstack_availability_zone
   cluster_domain          = var.cluster_domain
   nodes_subnet_id         = module.topology.nodes_subnet_id
   private_network_id      = module.topology.private_network_id
@@ -45,6 +46,8 @@ module "bootstrap" {
 module "masters" {
   source = "./masters"
 
+  availability_zone   = var.openstack_availability_zone
+
   base_image_id   = data.openstack_images_image_v2.base_image.id
   cluster_id      = var.cluster_id
   flavor_name     = var.openstack_master_flavor_name
diff --git a/data/data/openstack/masters/main.tf b/data/data/openstack/masters/main.tf
index c39f45054..d09d7c6fc 100644
--- a/data/data/openstack/masters/main.tf
+++ b/data/data/openstack/masters/main.tf
@@ -40,6 +40,8 @@ resource "openstack_compute_instance_v2" "master_conf" {
   name = "${var.cluster_id}-master-${count.index}"
   count = var.instance_count
 
+  availability_zone = var.availability_zone
+
   flavor_id = data.openstack_compute_flavor_v2.masters_flavor.id
   image_id = var.root_volume_size == null ? var.base_image_id : null
   security_groups = var.master_sg_ids
diff --git a/data/data/openstack/masters/variables.tf b/data/data/openstack/masters/variables.tf
index 7fdd06ff2..de77d2733 100644
--- a/data/data/openstack/masters/variables.tf
+++ b/data/data/openstack/masters/variables.tf
@@ -40,3 +40,8 @@ variable "root_volume_type" {
   type        = string
   description = "The type of volume for the root block device."
 }
+
+variable "availability_zone" {
+  type        = string
+  description = "Name of availability zone to deploy cluster to."
+}
diff --git a/data/data/openstack/variables-openstack.tf b/data/data/openstack/variables-openstack.tf
index 279d58966..2e257d3c8 100644
--- a/data/data/openstack/variables-openstack.tf
+++ b/data/data/openstack/variables-openstack.tf
@@ -335,3 +335,8 @@ Contains 0 if the OpenStack Octavia endpoint is missing and 1 if it exists.
 EOF
 
 }
+
+variable "openstack_availability_zone" {
+  type        = string
+  description = "Name of availability zone to deploy cluster to."
+}
diff --git a/pkg/asset/cluster/tfvars.go b/pkg/asset/cluster/tfvars.go
index d6e32cc2c..ff6fb7093 100644
--- a/pkg/asset/cluster/tfvars.go
+++ b/pkg/asset/cluster/tfvars.go
@@ -367,6 +367,7 @@ func (t *TerraformVariables) Generate(parents asset.Parents) error {
 		data, err = openstacktfvars.TFVars(
 			masters[0].Spec.ProviderSpec.Value.Object.(*openstackprovider.OpenstackProviderSpec),
 			installConfig.Config.Platform.OpenStack.Cloud,
+			installConfig.Config.Platform.OpenStack.AvailabilityZone,
 			installConfig.Config.Platform.OpenStack.ExternalNetwork,
 			installConfig.Config.Platform.OpenStack.ExternalDNS,
 			installConfig.Config.Platform.OpenStack.LbFloatingIP,
diff --git a/pkg/asset/installconfig/openstack/openstack.go b/pkg/asset/installconfig/openstack/openstack.go
index f7d1c3d44..92f0faaed 100644
--- a/pkg/asset/installconfig/openstack/openstack.go
+++ b/pkg/asset/installconfig/openstack/openstack.go
@@ -44,6 +44,33 @@ func Platform() (*openstack.Platform, error) {
 		return nil, err
 	}
 
+	availabilityZoneNames, err := validValuesFetcher.GetAvailabilityZoneNames(cloud)
+	if err != nil {
+		return nil, err
+	}
+	sort.Strings(availabilityZoneNames)
+	var availabilityZone string
+	err = survey.Ask([]*survey.Question{
+		{
+			Prompt: &survey.Select{
+				Message: "AvailabilityZone",
+				Help:    "The OpenStack availability zone to be used for control-plane and compute nodes.",
+				Options: availabilityZoneNames,
+			},
+			Validate: survey.ComposeValidators(survey.Required, func(ans interface{}) error {
+				value := ans.(string)
+				i := sort.SearchStrings(availabilityZoneNames, value)
+				if i == len(availabilityZoneNames) || availabilityZoneNames[i] != value {
+					return errors.Errorf("invalid availability zone name %q, should be one of %+v", value, strings.Join(availabilityZoneNames, ", "))
+				}
+				return nil
+			}),
+		},
+	}, &availabilityZone)
+	if err != nil {
+		return nil, err
+	}
+
 	networkNames, err := validValuesFetcher.GetNetworkNames(cloud)
 	if err != nil {
 		return nil, err
diff --git a/pkg/asset/installconfig/openstack/realvalidvaluesfetcher.go b/pkg/asset/installconfig/openstack/realvalidvaluesfetcher.go
index b40c494cb..307d075b5 100644
--- a/pkg/asset/installconfig/openstack/realvalidvaluesfetcher.go
+++ b/pkg/asset/installconfig/openstack/realvalidvaluesfetcher.go
@@ -5,6 +5,7 @@ import (
 
 	"github.com/gophercloud/gophercloud/openstack/common/extensions"
 	"github.com/gophercloud/gophercloud/openstack/compute/v2/flavors"
+	"github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones"
 	"github.com/gophercloud/gophercloud/openstack/identity/v3/tokens"
 	netext "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions"
 	"github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/layer3/floatingips"
@@ -37,6 +38,37 @@ func (f realValidValuesFetcher) GetCloudNames() ([]string, error) {
 	return cloudNames, nil
 }
 
+// GetAvailabilityZoneNames gets a list of valid availability zone names.
+func (f realValidValuesFetcher) GetAvailabilityZoneNames(cloud string) ([]string, error) {
+	opts := defaultClientOpts(cloud)
+
+	conn, err := clientconfig.NewServiceClient("compute", opts)
+	if err != nil {
+		return nil, err
+	}
+
+	allPages, err := availabilityzones.List(conn).AllPages()
+	if err != nil {
+		return nil, err
+	}
+
+	allAvailabilityZones, err := availabilityzones.ExtractAvailabilityZones(allPages)
+	if err != nil {
+		return nil, err
+	}
+
+	if len(allAvailabilityZones) == 0 {
+		return nil, errors.New("no OpenStack availability zones were found")
+	}
+
+	availabilityZoneNames := make([]string, len(allAvailabilityZones))
+	for i, availabilityZone := range allAvailabilityZones {
+		availabilityZoneNames[i] = availabilityZone.ZoneName
+	}
+
+	return availabilityZoneNames, nil
+}
+
 // GetNetworkNames gets the valid network names.
 func (f realValidValuesFetcher) GetNetworkNames(cloud string) ([]string, error) {
 	opts := defaultClientOpts(cloud)
diff --git a/pkg/asset/machines/openstack/machines.go b/pkg/asset/machines/openstack/machines.go
index adedfbc28..df63db193 100644
--- a/pkg/asset/machines/openstack/machines.go
+++ b/pkg/asset/machines/openstack/machines.go
@@ -44,7 +44,7 @@ func Machines(clusterID string, config *types.InstallConfig, pool *types.Machine
 	}
 	var machines []machineapi.Machine
 	for idx := int64(0); idx < total; idx++ {
-		az := ""
+		az := config.Platform.OpenStack.AvailabilityZone
 		trunk := config.Platform.OpenStack.TrunkSupport
 		provider, err := provider(clusterID, platform, mpool, osImage, az, role, userDataSecret, trunk)
 		if err != nil {
diff --git a/pkg/asset/machines/openstack/machinesets.go b/pkg/asset/machines/openstack/machinesets.go
index c215e38de..e762b903b 100644
--- a/pkg/asset/machines/openstack/machinesets.go
+++ b/pkg/asset/machines/openstack/machinesets.go
@@ -31,7 +31,7 @@ func MachineSets(clusterID string, config *types.InstallConfig, pool *types.Mach
 
 	// TODO(flaper87): Add support for availability zones
 	var machinesets []*clusterapi.MachineSet
-	az := ""
+	az := config.Platform.OpenStack.AvailabilityZone
 	trunk := config.Platform.OpenStack.TrunkSupport
 	provider, err := provider(clusterID, platform, mpool, osImage, az, role, userDataSecret, trunk)
 	if err != nil {
diff --git a/pkg/tfvars/openstack/openstack.go b/pkg/tfvars/openstack/openstack.go
index 95ee264b1..e295bc096 100644
--- a/pkg/tfvars/openstack/openstack.go
+++ b/pkg/tfvars/openstack/openstack.go
@@ -18,6 +18,7 @@ import (
 type config struct {
 	BaseImageName          string   `json:"openstack_base_image_name,omitempty"`
 	BaseImageLocalFilePath string   `json:"openstack_base_image_local_file_path,omitempty"`
+	AvailabilityZone       string   `json:"openstack_availability_zone,omitempty"`
 	ExternalNetwork        string   `json:"openstack_external_network,omitempty"`
 	Cloud                  string   `json:"openstack_credentials_cloud,omitempty"`
 	FlavorName             string   `json:"openstack_master_flavor_name,omitempty"`
@@ -34,9 +35,10 @@ type config struct {
 }
 
 // TFVars generates OpenStack-specific Terraform variables.
-func TFVars(masterConfig *v1alpha1.OpenstackProviderSpec, cloud string, externalNetwork string, externalDNS []string, lbFloatingIP string, apiVIP string, dnsVIP string, ingressVIP string, trunkSupport string, octaviaSupport string, baseImage string, infraID string, userCA string, bootstrapIgn string) ([]byte, error) {
+func TFVars(masterConfig *v1alpha1.OpenstackProviderSpec, cloud string, availabilityZone string, externalNetwork string, externalDNS []string, lbFloatingIP string, apiVIP string, dnsVIP string, ingressVIP string, trunkSupport string, octaviaSupport string, baseImage string, infraID string, userCA string, bootstrapIgn string) ([]byte, error) {
 
 	cfg := &config{
+		AvailabilityZone: availabilityZone,
 		ExternalNetwork: externalNetwork,
 		Cloud:           cloud,
 		FlavorName:      masterConfig.Flavor,
diff --git a/pkg/types/openstack/machinepool.go b/pkg/types/openstack/machinepool.go
index b05437932..473c41d2d 100644
--- a/pkg/types/openstack/machinepool.go
+++ b/pkg/types/openstack/machinepool.go
@@ -7,6 +7,10 @@ type MachinePool struct {
 	// eg. m1.large
 	FlavorName string `json:"type"`
 
+	// AvailabilityZone defines the OpenStack Nova AvailabilityZone.
+	// eg. nova
+	AvailabilityZone string `json:"availabilityZone,omitempty"`
+
 	// RootVolume defines the root volume for instances in the machine pool.
 	// The instances use ephemeral disks if not set.
 	// +optional
diff --git a/pkg/types/openstack/platform.go b/pkg/types/openstack/platform.go
index 13dcb5d6e..cc5dc5216 100644
--- a/pkg/types/openstack/platform.go
+++ b/pkg/types/openstack/platform.go
@@ -7,6 +7,9 @@ type Platform struct {
 	// Deprecated: this value is not used by the installer.
 	Region string `json:"region"`
 
+	// AvailabilityZone specifies the OpenStack availability zone where the cluster will be created.
+	AvailabilityZone string `json:"availabilityZone,omitempty"`
+
 	// DefaultMachinePlatform is the default configuration used when
 	// installing on OpenStack for machine pools which do not define their own
 	// platform configuration.
diff --git a/pkg/types/openstack/validation/platform.go b/pkg/types/openstack/validation/platform.go
index 7b6ad4edd..a08b301d7 100644
--- a/pkg/types/openstack/validation/platform.go
+++ b/pkg/types/openstack/validation/platform.go
@@ -20,6 +20,12 @@ func ValidatePlatform(p *openstack.Platform, n *types.Networking, fldPath *field
 	} else if !isValidValue(p.Cloud, validClouds) {
 		allErrs = append(allErrs, field.NotSupported(fldPath.Child("cloud"), p.Cloud, validClouds))
 	} else {
+		validAvailabilityZones, err := fetcher.GetAvailabilityZoneNames(p.Cloud)
+		if err != nil {
+			allErrs = append(allErrs, field.InternalError(fldPath.Child("availabilityZone"), errors.New("could not retrieve valid availability zones")))
+		} else if !isValidValue(p.AvailabilityZone, validAvailabilityZones) {
+			allErrs = append(allErrs, field.NotSupported(fldPath.Child("availabilityZone"), p.AvailabilityZone, validAvailabilityZones))
+		}
 		validNetworks, err := fetcher.GetNetworkNames(p.Cloud)
 		if err != nil {
 			allErrs = append(allErrs, field.InternalError(fldPath.Child("externalNetwork"), errors.New("could not retrieve valid networks")))
diff --git a/pkg/types/openstack/validation/validvaluesfetcher.go b/pkg/types/openstack/validation/validvaluesfetcher.go
index 1b7d0a31b..e91c4953d 100644
--- a/pkg/types/openstack/validation/validvaluesfetcher.go
+++ b/pkg/types/openstack/validation/validvaluesfetcher.go
@@ -6,6 +6,8 @@ package validation
 type ValidValuesFetcher interface {
 	// GetCloudNames gets the valid cloud names.
 	GetCloudNames() ([]string, error)
+	// GetAvailabilityZoneNames gets the valid availability zone names.
+	GetAvailabilityZoneNames(cloud string) ([]string, error)
 	// GetNetworkNames gets the valid network names.
 	GetNetworkNames(cloud string) ([]string, error)
 	// GetFlavorNames gets the valid flavor names.
diff --git a/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/doc.go b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/doc.go
new file mode 100644
index 000000000..29b554d21
--- /dev/null
+++ b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/doc.go
@@ -0,0 +1,61 @@
+/*
+Package availabilityzones provides the ability to get lists and detailed
+availability zone information and to extend a server result with
+availability zone information.
+
+Example of Extend server result with Availability Zone Information:
+
+	type ServerWithAZ struct {
+		servers.Server
+		availabilityzones.ServerAvailabilityZoneExt
+	}
+
+	var allServers []ServerWithAZ
+
+	allPages, err := servers.List(client, nil).AllPages()
+	if err != nil {
+		panic("Unable to retrieve servers: %s", err)
+	}
+
+	err = servers.ExtractServersInto(allPages, &allServers)
+	if err != nil {
+		panic("Unable to extract servers: %s", err)
+	}
+
+	for _, server := range allServers {
+		fmt.Println(server.AvailabilityZone)
+	}
+
+Example of Get Availability Zone Information
+
+	allPages, err := availabilityzones.List(computeClient).AllPages()
+	if err != nil {
+		panic(err)
+	}
+
+	availabilityZoneInfo, err := availabilityzones.ExtractAvailabilityZones(allPages)
+	if err != nil {
+		panic(err)
+	}
+
+	for _, zoneInfo := range availabilityZoneInfo {
+  		fmt.Printf("%+v\n", zoneInfo)
+	}
+
+Example of Get Detailed Availability Zone Information
+
+	allPages, err := availabilityzones.ListDetail(computeClient).AllPages()
+	if err != nil {
+		panic(err)
+	}
+
+	availabilityZoneInfo, err := availabilityzones.ExtractAvailabilityZones(allPages)
+	if err != nil {
+		panic(err)
+	}
+
+	for _, zoneInfo := range availabilityZoneInfo {
+  		fmt.Printf("%+v\n", zoneInfo)
+	}
+*/
+package availabilityzones
diff --git a/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/requests.go b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/requests.go
new file mode 100644
index 000000000..f9a2e86e0
--- /dev/null
+++ b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/requests.go
@@ -0,0 +1,20 @@
+package availabilityzones
+
+import (
+	"github.com/gophercloud/gophercloud"
+	"github.com/gophercloud/gophercloud/pagination"
+)
+
+// List will return the existing availability zones.
+func List(client *gophercloud.ServiceClient) pagination.Pager {
+	return pagination.NewPager(client, listURL(client), func(r pagination.PageResult) pagination.Page {
+		return AvailabilityZonePage{pagination.SinglePageBase(r)}
+	})
+}
+
+// ListDetail will return the existing availability zones with detailed information.
+func ListDetail(client *gophercloud.ServiceClient) pagination.Pager {
+	return pagination.NewPager(client, listDetailURL(client), func(r pagination.PageResult) pagination.Page {
+		return AvailabilityZonePage{pagination.SinglePageBase(r)}
+	})
+}
diff --git a/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/results.go b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/results.go
new file mode 100644
index 000000000..d48a0ea85
--- /dev/null
+++ b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/results.go
@@ -0,0 +1,76 @@
+package availabilityzones
+
+import (
+	"encoding/json"
+	"time"
+
+	"github.com/gophercloud/gophercloud"
+	"github.com/gophercloud/gophercloud/pagination"
+)
+
+// ServerAvailabilityZoneExt is an extension to the base Server object.
+type ServerAvailabilityZoneExt struct {
+	// AvailabilityZone is the availabilty zone the server is in.
+	AvailabilityZone string `json:"OS-EXT-AZ:availability_zone"`
+}
+
+// ServiceState represents the state of a service in an AvailabilityZone.
+type ServiceState struct {
+	Active    bool      `json:"active"`
+	Available bool      `json:"available"`
+	UpdatedAt time.Time `json:"-"`
+}
+
+// UnmarshalJSON to override default
+func (r *ServiceState) UnmarshalJSON(b []byte) error {
+	type tmp ServiceState
+	var s struct {
+		tmp
+		UpdatedAt gophercloud.JSONRFC3339MilliNoZ `json:"updated_at"`
+	}
+	err := json.Unmarshal(b, &s)
+	if err != nil {
+		return err
+	}
+	*r = ServiceState(s.tmp)
+
+	r.UpdatedAt = time.Time(s.UpdatedAt)
+
+	return nil
+}
+
+// Services is a map of services contained in an AvailabilityZone.
+type Services map[string]ServiceState
+
+// Hosts is map of hosts/nodes contained in an AvailabilityZone.
+// Each host can have multiple services.
+type Hosts map[string]Services
+
+// ZoneState represents the current state of the availability zone.
+type ZoneState struct {
+	// Returns true if the availability zone is available
+	Available bool `json:"available"`
+}
+
+// AvailabilityZone contains all the information associated with an OpenStack
+// AvailabilityZone.
+type AvailabilityZone struct {
+	Hosts Hosts `json:"hosts"`
+	// The availability zone name
+	ZoneName  string    `json:"zoneName"`
+	ZoneState ZoneState `json:"zoneState"`
+}
+
+type AvailabilityZonePage struct {
+	pagination.SinglePageBase
+}
+
+// ExtractAvailabilityZones returns a slice of AvailabilityZones contained in a
+// single page of results.
+func ExtractAvailabilityZones(r pagination.Page) ([]AvailabilityZone, error) {
+	var s struct {
+		AvailabilityZoneInfo []AvailabilityZone `json:"availabilityZoneInfo"`
+	}
+	err := (r.(AvailabilityZonePage)).ExtractInto(&s)
+	return s.AvailabilityZoneInfo, err
+}
diff --git a/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/urls.go b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/urls.go
new file mode 100644
index 000000000..9d99ec74b
--- /dev/null
+++ b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/availabilityzones/urls.go
@@ -0,0 +1,11 @@
+package availabilityzones
+
+import "github.com/gophercloud/gophercloud"
+
+func listURL(c *gophercloud.ServiceClient) string {
+	return c.ServiceURL("os-availability-zone")
+}
+
+func listDetailURL(c *gophercloud.ServiceClient) string {
+	return c.ServiceURL("os-availability-zone", "detail")
+}
diff --git a/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/delegate.go b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/delegate.go
new file mode 100644
index 000000000..00e7c3bec
--- /dev/null
+++ b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/delegate.go
@@ -0,0 +1,23 @@
+package extensions
+
+import (
+	"github.com/gophercloud/gophercloud"
+	common "github.com/gophercloud/gophercloud/openstack/common/extensions"
+	"github.com/gophercloud/gophercloud/pagination"
+)
+
+// ExtractExtensions interprets a Page as a slice of Extensions.
+func ExtractExtensions(page pagination.Page) ([]common.Extension, error) {
+	return common.ExtractExtensions(page)
+}
+
+// Get retrieves information for a specific extension using its alias.
+func Get(c *gophercloud.ServiceClient, alias string) common.GetResult {
+	return common.Get(c, alias)
+}
+
+// List returns a Pager which allows you to iterate over the full collection of extensions.
+// It does not accept query parameters.
+func List(c *gophercloud.ServiceClient) pagination.Pager {
+	return common.List(c)
+}
diff --git a/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/doc.go b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/doc.go
new file mode 100644
index 000000000..2b447da1d
--- /dev/null
+++ b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/doc.go
@@ -0,0 +1,3 @@
+// Package extensions provides information and interaction with the
+// different extensions available for the OpenStack Compute service.
+package extensions
diff --git a/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/urls.go b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/urls.go
new file mode 100644
index 000000000..9d40e4950
--- /dev/null
+++ b/vendor/github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/urls.go
@@ -0,0 +1,7 @@
+package extensions
+
+import "github.com/gophercloud/gophercloud"
+
+func ActionURL(client *gophercloud.ServiceClient, id string) string {
+	return client.ServiceURL("servers", id, "action")
+}
-- 
2.26.2

